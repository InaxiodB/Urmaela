#include <WiFi.h>    
#include <PubSubClient.h>  
#include <WiFiClientSecure.h>
 #include <cstring>  
#include <M5Stack.h>
#include <DHT.h>
#include <OneWire.h>
#include <DallasTemperature.h>

const char* ssid = "iPhone 13 Bry";    // nuestro wifi
const char* password = "laparra12";  //contraseña wifi
long lastMsg = 0;  
char msg[50];
char tmp[50];
char hmd[50];
char pha[50];
char tempa[50];
int value = 0;
#define DHT_PIN 22  // pin en el que se conecta el sensor de temperatura.
DHT dht(DHT_PIN, DHT11);
const int humsueloPin = 36;  // Puedes cambiarlo según la conexión física y los pines disponibles
int valHumsuelo;
float temperatura;
float humedad;
 float temperatura_agua;

  float temperaturaa[50];
#define ONE_WIRE_BUS 21  // Pin de datos del sensor DS18B20
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

const char* mqtt_server = "900b3f397cb946f3906cd7107bd93e1a.s2.eu.hivemq.cloud";
const int mqtt_port = 8883; // nuestra ip de server.
const char* mqtt_username = "ultimo"; // name de usuario
const char* mqtt_password = "Ultimo12";  //contraseña.




static const char* root_ca PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw
TzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh
cmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4
WhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu
ZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY
MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc
h77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+
0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U
A5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW
T8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH
B5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC
B5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv
KBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn
OlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn
jh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw
qHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI
rU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV
HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq
hkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL
ubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ
3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK
NFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5
ORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur
TkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC
jNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc
oyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq
4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA
mRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d
emyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=
-----END CERTIFICATE-----
)EOF";


WiFiClientSecure espClient;
PubSubClient client(espClient);


bool sensorCalibrado = false;
const int numLecturasCalibracion = 65;
float sumaTemperaturas = 0;
float sumaHumedad = 0;
void calibrarSensor() {  
Serial.println("Calibrando sensores...");
for (int i = 0; i < numLecturasCalibracion; ++i) {
sumaTemperaturas += dht.readTemperature();
sumaHumedad = dht.readHumidity();


}
  temperatura = sumaTemperaturas / numLecturasCalibracion;
  humedad = sumaHumedad / numLecturasCalibracion;
  Serial.print("Temperatura calibrada: ");
  Serial.println(temperatura);
  sensorCalibrado = true;

}

void setup_wifi() {

  M5.Lcd.print("Hello World");
delay(10);
Serial.println();
Serial.print("Connecting to ");
Serial.println(ssid);
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
Serial.println("");
Serial.println("WiFi connected");
Serial.println("IP address: ");
Serial.println(WiFi.localIP());
}
void callback(char* topic, byte* payload, unsigned int length) {
Serial.print("Mensaje recibido en el canal: ");
Serial.println(topic);
String content = "";
for (size_t i = 0; i < length; i++) {
content.concat((char)payload[i]);
}
Serial.print(content);
Serial.println();
}
void reconnect() {
while (!client.connected()) {
Serial.print("Attempting MQTT connection...");
if(client.connect("ESP32Client", mqtt_username, mqtt_password)) {
Serial.println("connected");
     
client.publish("m5stack/humedad", msg);
sprintf(msg, "%ld", valHumsuelo);  


dtostrf(temperatura, 4, 1, tmp); // Convierte la temperatura a una cadena con un decimal
client.publish("m5stack/temperatura", tmp); // Publica la temperatura en el tema "TEMPERATURA"


dtostrf(humedad, 4, 1, hmd);
client.publish("m5stack/humedad_aire", hmd); 



} else {
Serial.print("failed, rc=");
Serial.print(client.state());
Serial.println(" try again in 2 seconds");
delay(2000);
}
}
}


void setup() {
float temperatura = dht.readTemperature();
float humedad = dht.readHumidity();


M5.begin();
pinMode(humsueloPin, INPUT);
dht.begin();
M5.Lcd.begin();
M5.Lcd.fillScreen(BLACK);
Serial.begin(115200);
setup_wifi();
espClient.setCACert(root_ca);
client.setServer(mqtt_server, mqtt_port);
client.subscribe("MEZUA");
client.setCallback(callback);
}


void loop() {
if (!sensorCalibrado) {
calibrarSensor();

}
else {
int sensorValue = analogRead(humsueloPin);
float temperatura = dht.readTemperature();
float humedad = dht.readHumidity();


valHumsuelo = map(sensorValue, 0, 4096, 0, 100);  // Ajusta estos valores según tu calibración
Serial.print("Valor del sensor: ");
Serial.println(sensorValue);
Serial.print("Humedad del suelo: ");
Serial.print(valHumsuelo);
Serial.println(" %");
delay(1000);  
client.publish("m5stack/humedad", msg);
sprintf(msg, "%ld", valHumsuelo);  
dtostrf(temperatura, 4, 1, tmp); // Convierte la temperatura a una cadena con un decimal
client.publish("m5stack/temperatura", tmp); // Publica la temperatura en el tema "TEMPERATURA"
dtostrf(humedad, 4, 1, hmd);
client.publish("m5stack/humedad_aire", hmd);

if (!client.connected()) {
reconnect();
}
client.loop();
client.subscribe("MEZUA");
delay(5000);
M5.Power.lightSleep(SLEEP_SEC(10));
M5.Power.reset();
}
}
